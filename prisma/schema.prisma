generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// TODO: add profile picture handle
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name           String
  email          String   @unique
  password       String
  phone          String?
  role           UserRole
  address        String?
  introduction   String?
  profilePicture String?

  clinicId String? @db.ObjectId
  clinic   Clinic? @relation(fields: [clinicId], references: [id])

  staff         Staff?
  notifications Notification[]

  status ActivityStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Clinic {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  phone    String
  email    String  @unique
  address1 String
  address2 String?

  specialists   User[]
  staff         Staff[]
  patients      Patient[]
  subscriptions Subscription[]
  disciplines   Discipline[]
  receipts      Receipt[]

  status ActivityStatus @default(INACTIVE)

  branding Branding?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clinics")
}

// Shows Branding in Invoice
model Branding {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String
  email String

  logo      String?
  signature String?

  clinicId String  @unique @db.ObjectId
  clinic   Clinic? @relation(fields: [clinicId], references: [id])

  note String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brandings")
}

// TODO: Add profile picture to Staff
model Staff {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name           String
  phone          String
  email          String?
  profilePicture String?

  dateOfBirth DateTime? @db.Date

  employeeId String
  gender     String
  address    String?
  role       String
  profession String?

  // One-to-many: User â†’ Appointments
  appointments Appointment[]
  userId       String        @unique @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  clinicId String @db.ObjectId
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  // Working Hours and Holiday
  workingHour WorkingHour?
  holiday     Holiday?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staffs")
}

model WorkingHour {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Times based on Days - Can be Empty
  // { from: { h: "HH", m: "MM" }, to: { h: "HH", m: "MM" }  }
  saturday  Json?
  sunday    Json?
  monday    Json?
  tuesday   Json?
  wednesday Json?
  thursday  Json?
  friday    Json?

  staffId String @unique @db.ObjectId
  staff   Staff  @relation(fields: [staffId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("working_hours")
}

model Holiday {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  date   DateTime @db.Date
  reason String
  time   String? // Saveable to DB, but can't be calculated

  staffId String @unique @db.ObjectId
  staff   Staff  @relation(fields: [staffId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("holidays")
}

model Discipline {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  clinicId String @db.ObjectId
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  staff        Staff[]
  bonds        Bond[]
  services     Service[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("disciplines")
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String
  status  NotificationStatus @default(CREATED)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Patient {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String?
  phone     String
  email     String?

  address           String?
  patientDocumentId String?
  dateOfBirth       DateTime?
  gender            String

  guardianName      String?
  guardianRelation  String?
  guardianDocuments String[]

  contactPreferences CommunicationMethod[]

  medicalCondition String?
  allergies        String?
  medications      String?

  documents      String[]
  otherDocuments String[]

  patient_status ActivityStatus @default(ACTIVE)

  clinicId     String        @db.ObjectId
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
  appointments Appointment[]

  note String?

  receipts           Receipt[]
  reminders          DirectReminder[]
  vouchers           Voucher[]
  scheduledReminders ScheduledReminderHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

model Appointment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  serviceId String  @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id])

  specialistId String @db.ObjectId
  specialist   Staff  @relation(fields: [specialistId], references: [id])

  date     DateTime @db.Date
  timeSlot String

  status    AppointmentStatus
  documents String[]
  note      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Voucher {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  price Float

  expireDate DateTime
  status     ActivityStatus @default(ACTIVE)

  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vouchers")
}

model Bond {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  serviceId String  @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id])
  sessions  Int

  price Float

  status   ActivityStatus @default(ACTIVE)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bonds")
}

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  price    Float
  duration Int // In minutes

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  bonds        Bond[]
  products     Product[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model Product {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  receiptId String  @db.ObjectId
  receipt   Receipt @relation(fields: [receiptId], references: [id])

  productType ProductType
  quantity    Int

  voucherId String?  @db.ObjectId
  voucher   Voucher? @relation(fields: [voucherId], references: [id])

  bondId String? @db.ObjectId
  bond   Bond?   @relation(fields: [bondId], references: [id])

  serviceId String?  @db.ObjectId
  service   Service? @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Receipt {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clinicId String @db.ObjectId
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  tax      Float
  discount Float

  paid Float // Paid Amount. Cause there maybe Due amount

  note          String?
  paymentMethod String // TODO: Check methods
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("receipts")
}

// Sends reminder directly - No interval
model DirectReminder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type     ReminderType
  schedule DateTime

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  communicationMethod CommunicationMethod

  subject String
  body    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("direct_reminders")
}

// Scheduled Reminder - Runs on Interval
model ReminderSchedule {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // This type is for what type of Message will be sent. Currently only reminders are of Appointments Related
  type  ReminderScheduleType @default(APPOINTMENT)
  prior Int? // Take in Minutes

  description  String?
  // This type is for which type of scheduled reminder is this. If TIMED - Reminder will be sent prior to a given time of appointment. DAY - in the day of Appointment. POST_APPOINTMENT and MISSED_APPOINTMENT are self explanatory
  scheduleType ReminderScheduleScheduleType @default(TIMED)

  communicationMethod CommunicationMethod[]
  status              ActivityStatus        @default(ACTIVE)

  subject String
  body    String

  histories ScheduledReminderHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reminder_schedules")
}

model ScheduledReminderHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  scheduleId String           @db.ObjectId
  schedule   ReminderSchedule @relation(fields: [scheduleId], references: [id])

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  status DeliveryStatus @default(DELIVERED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("scheduled_reminder_histories")
}

model Package {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  features    String[]

  productId String? // Stripe Product Id

  price Float

  durationMonths Int
  subscriptions  Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("packages")
}

model ClinicOrder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  email   String @unique
  phone   String
  address String

  userName    String
  userEmail   String @unique
  userPhone   String
  userAddress String

  subscription Subscription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clinic_orders")
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  email String
  phone String?

  paidAt    DateTime?
  startDate DateTime?
  endDate   DateTime?

  orderId String?      @unique @db.ObjectId
  order   ClinicOrder? @relation(fields: [orderId], references: [id])

  clinicId String? @db.ObjectId
  clinic   Clinic? @relation(fields: [clinicId], references: [id])

  packageId String  @db.ObjectId
  package   Package @relation(fields: [packageId], references: [id])

  transactionId String
  status        SubscriptionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// ENUMs
enum ActivityStatus {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DeliveryStatus {
  DELIVERED
  FAILED
}

enum NotificationStatus {
  VIEWED
  DELIVERED
  CREATED
}

enum ReminderType {
  IMMEDIATE
  SCHEDULED
}

enum ReminderScheduleType {
  APPOINTMENT
}

enum ReminderScheduleScheduleType {
  TIMED
  DAY
  POST_APPOINTMENT
  MISSED_APPOINTMENT
}

enum CommunicationMethod {
  EMAIL
  SMS
  WHATSAPP
}

enum ProductType {
  BOND
  SERVICE
  VOUCHER
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  VOUCHER
  BOND
  OTHER
}

enum SubscriptionStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum UserRole {
  SUPER_ADMIN
  CLINIC_ADMIN
  RECEPTIONIST
  SPECIALIST
}

enum AppointmentStatus {
  SCHEDULED
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// TODO: Check which and which are the actual Status
