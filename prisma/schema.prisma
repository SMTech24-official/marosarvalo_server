generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String
  email    String   @unique
  password String
  phone    String?
  role     UserRole
  address  String?

  // Relation to Clinic (optional)
  clinicId String? @db.ObjectId
  clinic   Clinic? @relation(fields: [clinicId], references: [id])

  // One-to-many: User → Appointments
  appointments Appointment[]

  // For Specialist
  employeeId String?
  profession String?

  status ActivityStatus @default(ACTIVE)

  // One-to-many: Discipline → Users
  disciplineId String?     @db.ObjectId
  discipline   Discipline? @relation(fields: [disciplineId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  phone String
  email String?

  employeeId String
  gender     String
  address    String?
  role       String

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  clinicId String @db.ObjectId
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  phone    String
  email    String  @unique
  address1 String
  address2 String?

  specialists   User[]
  staff         Staff[]
  patients      Patient[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discipline {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  staff        Staff[]
  specialists  User[]
  bonds        Bond[]
  services     Service[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String?
  phone     String
  email     String?

  address           String?
  patientDocumentId String?
  dateOfBirth       DateTime?
  gender            String

  guardianName      String?
  guardianRelation  String?
  guardianDocuments String[]

  contactPreferences CommunicationMethod[]

  medicalCondition String?
  allergies        String?
  medications      String?

  documents      String[]
  otherDocuments String[]

  patient_status ActivityStatus @default(ACTIVE)

  clinicId     String        @db.ObjectId
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
  appointments Appointment[]

  note String?

  receipts           Receipt[]
  reminders          DirectReminder[]
  vouchers           Voucher[]
  scheduledReminders ScheduledReminderHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  service String

  specialistId String @db.ObjectId
  specialist   User   @relation(fields: [specialistId], references: [id])

  date          DateTime
  timeSlotStart String
  timeSlotEnd   String

  status    AppointmentStatus
  documents String[]
  note      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voucher {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  price Float

  expireDate DateTime
  status     ActivityStatus @default(ACTIVE)

  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bond {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  serviceId String  @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id])
  sessions  Int

  price Float

  status   ActivityStatus @default(ACTIVE)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  price    Float
  duration Int // In minutes

  bonds    Bond[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  receiptId String  @db.ObjectId
  receipt   Receipt @relation(fields: [receiptId], references: [id])

  productType ProductType
  quantity    Int

  voucherId String?  @db.ObjectId
  voucher   Voucher? @relation(fields: [voucherId], references: [id])

  bondId String? @db.ObjectId
  bond   Bond?   @relation(fields: [bondId], references: [id])

  serviceId String?  @db.ObjectId
  service   Service? @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Receipt {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  tax      Float
  discount Float

  paid Float // Paid Amount. Cause there maybe Due amount

  note          String?
  paymentMethod String // TODO: Check methods
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Sends reminder directly - No interval
model DirectReminder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type     ReminderType
  schedule DateTime

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  communicationMethod CommunicationMethod

  subject String
  body    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Scheduled Reminder - Runs on Interval
model ReminderSchedule {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // This type is for what type of Message will be sent. Currently only reminders are of Appointments Related
  type  ReminderScheduleType @default(APPOINTMENT)
  prior Int? // Take in Minutes

  description  String?
  // This type is for which type of scheduled reminder is this. If TIMED - Reminder will be sent prior to a given time of appointment. DAY - in the day of Appointment. POST_APPOINTMENT and MISSED_APPOINTMENT are self explanatory
  scheduleType ReminderScheduleScheduleType @default(TIMED)

  communicationMethod CommunicationMethod[]
  status              ActivityStatus        @default(ACTIVE)

  subject String
  body    String

  histories ScheduledReminderHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduledReminderHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  scheduleId String           @db.ObjectId
  schedule   ReminderSchedule @relation(fields: [scheduleId], references: [id])

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  status DeliveryStatus @default(DELIVERED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  features    String[]

  price Float

  durationMonths Int
  subscriptions  Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  endDate   DateTime

  clinicId String @db.ObjectId
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  packageId String  @db.ObjectId
  package   Package @relation(fields: [packageId], references: [id])

  stripeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ActivityStatus {
  ACTIVE
  INACTIVE
}

enum DeliveryStatus {
  DELIVERED
  FAILED
}

enum ReminderType {
  IMMEDIATE
  SCHEDULED
}

enum ReminderScheduleType {
  APPOINTMENT
}

enum ReminderScheduleScheduleType {
  TIMED
  DAY
  POST_APPOINTMENT
  MISSED_APPOINTMENT
}

enum CommunicationMethod {
  EMAIL
  SMS
  WHATSAPP
}

enum ProductType {
  BOND
  SERVICE
  VOUCHER
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  VOUCHER
  BOND
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum UserRole {
  SUPER_ADMIN
  CLINIC_ADMIN
  RECEPTIONIST
  SPECIALIST
}

enum AppointmentStatus {
  SCHEDULED
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// TODO: Check which and which are the actual Status
