generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  password     String
  role         Role
  clinicId     String?       @db.ObjectId
  clinic       Clinic?       @relation(fields: [clinicId], references: [id])
  appointments Appointment[]

  disciplineId String?     @db.ObjectId
  discipline   Discipline? @relation(fields: [disciplineId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  user_id String
  phone   String
  email   String?
  gender  String
  address String?
  role    String

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  clinicId String @db.ObjectId
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  email     String
  address_1 String
  address_2 String

  users         User[]
  staff         Staff[]
  patients      Patient[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discipline {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  staff Staff[]
  user  User[]
  bond  Bond[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]
}

model Patient {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String?
  phone     String
  email     String?

  address             String?
  patient_document_id String?
  date_of_birth       DateTime?
  gender              String

  guardian_name        String?
  guardian_relation    String?
  guardian_document_id String? // TODO: Check Uploads

  medical_condition String?
  allergies         String?
  medications       String?

  documents String? // TODO: Check Uploads

  other_documents String? // TODO: Check Uploads
  patient_status  PatientStatus @default(ACTIVE)

  clinicId     String        @db.ObjectId
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
  appointments Appointment[]

  note String?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Receipt   Receipt[]
  Reminder  Reminder[]
  Voucher   Voucher[]
}

model Appointment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  service String

  specialistId String @db.ObjectId
  specialist   User   @relation(fields: [specialistId], references: [id])

  date            DateTime
  time_slot_start String
  time_slot_end   String

  status    AppointmentStatus
  documents String? // TODO: Check Uploads
  note      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bond {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  service  String // TODO: Need Service Model
  sessions Int

  price Float

  status BondStatus @default(ACTIVE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  receiptId String  @db.ObjectId
  receipt   Receipt @relation(fields: [receiptId], references: [id])

  product_type ProductType
  quantity     Int

  voucherId String   @db.ObjectId
  voucher   Voucher? @relation(fields: [voucherId], references: [id])

  bondId String @db.ObjectId
  bond   Bond?  @relation(fields: [bondId], references: [id])

  serviceId String @db.ObjectId
  // service Ser // TODO: Make Service
  // TODO: Make sure all products have `price`

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Receipt {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  tax      Float
  discount Float

  paid Float

  note String?

  payment_method String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type     ReminderType
  schedule DateTime

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  communication_method CommunicationMethod

  subject String
  body    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Scheduled Reminder - Runs on Interval
model ReminderSchedule {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type  String // TODO: Add reminder type
  prior Int // Take in Minutes

  description String?

  communication_method CommunicationMethod[]
  status               ReminderScheduleStatus @default(ACTIVE)

  subject String
  body    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voucher {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  patientId String  @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id])

  amount Float

  expire_date DateTime
  status      VoucherStatus @default(ACTIVE)

  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  features    String[]

  price Float

  duration_months Int
  subscriptions   Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  endDate   DateTime

  clinicId String @db.ObjectId
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  packageId String  @db.ObjectId
  package   Package @relation(fields: [packageId], references: [id])

  stripeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BillingStatus {
  ACTIVE
  INACTIVE
}

enum BondStatus {
  ACTIVE
  INACTIVE
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
}

enum PatientStatus {
  ACTIVE
  INACTIVE
}

enum ReminderScheduleStatus {
  ACTIVE
  INACTIVE
}

// TODO: Check if possible to use single Status

enum ReminderType {
  IMMEDIATELY
  SCHEDULED
}

enum CommunicationMethod {
  EMAIL
  SMS
  WHATSAPP
}

enum ProductType {
  BOND
  SERVICE
  VOUCHER
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  VOUCHER
  BOND
  OTHER
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

// enum StaffRole {
//   CLEANER
//   CONSULTATION
//   EMERGENCY
//   OTHERS
// }

enum Role {
  SUPER_ADMIN
  CLINIC_ADMIN
  RECEPTIONIST
  SPECIALIST
}

enum AppointmentStatus {
  SCHEDULED
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// TODO: Check which and which are the actual Status
