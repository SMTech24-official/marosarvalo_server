generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// ---------------- MODELS START HERE ----------------
// -------------- User and Admin Models ---------------

// TODO: add profile picture handle
model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name           String
    email          String   @unique
    password       String
    phone          String?
    role           UserRole
    address        String?
    introduction   String?
    profilePicture String?

    clinicId String? @db.ObjectId
    clinic   Clinic? @relation(fields: [clinicId], references: [id])

    staff Staff?
    // notifications Notification[]

    status ActivityStatus @default(ACTIVE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model AdminReminder {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    email String

    subject String
    message String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("admin_reminders")
}

model Package {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    packageType PackageType     @default(BASIC)
    usageType   UsageType       @default(INDIVIDUAL)
    planType    PlanType        @default(BASIC)
    duration    PackageDuration @default(QUARTERLY)
    features    String[]

    priceId String // Stripe Price Id

    price         Float
    subscriptions Subscription[]

    status ActivityStatus @default(ACTIVE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("packages")
}

model ClinicOrder {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name    String
    email   String @unique
    phone   String
    address String

    userName    String
    userEmail   String @unique
    userPhone   String
    userAddress String

    subscription Subscription?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("clinic_orders")
}

model Subscription {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name  String
    email String
    phone String?

    paidAt    DateTime?
    startDate DateTime?
    endDate   DateTime?

    orderId String?      @unique @db.ObjectId
    order   ClinicOrder? @relation(fields: [orderId], references: [id])

    clinicId String? @unique @db.ObjectId
    clinic   Clinic? @relation(fields: [clinicId], references: [id])

    packageId String  @db.ObjectId
    package   Package @relation(fields: [packageId], references: [id])

    transactionId String?
    status        SubscriptionStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("subscriptions")
}

// -------------- Clinic Models ---------------

// TODO: Exclude admin data when getting specialists
model Clinic {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name     String
    phone    String
    email    String  @unique
    address1 String
    address2 String?

    specialists      User[]
    staff            Staff[]
    patients         Patient[]
    disciplines      Discipline[]
    receipts         Invoice[]
    reminderSchedule ReminderSchedule[]

    subscription Subscription?
    status       ActivityStatus @default(INACTIVE)

    branding Branding?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("clinics")
}

// Shows Branding in Invoice
model Branding {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title String
    email String

    logo      String?
    signature String?

    clinicId String  @unique @db.ObjectId
    clinic   Clinic? @relation(fields: [clinicId], references: [id])

    note String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("brandings")
}

// TODO: Add profile picture to Staff
// @IdMod
model Staff {
    dbId String @id @default(auto()) @map("_id") @db.ObjectId
    id   Int

    name           String
    phone          String
    email          String?
    profilePicture String?

    dateOfBirth DateTime? @db.Date

    employeeId String
    gender     Gender
    address    String?
    role       String
    profession String?

    // One-to-many: User â†’ Appointments
    appointments Appointment[]
    userId       String?       @unique @db.ObjectId
    user         User?         @relation(fields: [userId], references: [id])

    disciplineId String     @db.ObjectId
    discipline   Discipline @relation(fields: [disciplineId], references: [id])

    clinicId String @db.ObjectId
    clinic   Clinic @relation(fields: [clinicId], references: [id])

    status ActivityStatus @default(ACTIVE)

    // Working Hours and Holiday
    workingHour WorkingHour?
    holiday     Holiday?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, clinicId])
    @@map("staffs")
}

model WorkingHour {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    // Times based on Days - Can be Empty
    // { from: { h: "HH", m: "MM" }, to: { h: "HH", m: "MM" }  }
    saturday  Json?
    sunday    Json?
    monday    Json?
    tuesday   Json?
    wednesday Json?
    thursday  Json?
    friday    Json?

    staffId String @unique @db.ObjectId
    staff   Staff  @relation(fields: [staffId], references: [dbId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("working_hours")
}

model Holiday {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    date   DateTime @db.Date
    reason String

    staffId String @unique @db.ObjectId
    staff   Staff  @relation(fields: [staffId], references: [dbId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("holidays")
}

// @IdMod
model Patient {
    dbId String @id @default(auto()) @map("_id") @db.ObjectId
    id   Int

    firstName String
    lastName  String?
    phone     String
    email     String?

    address     String?
    documentId  String?
    dateOfBirth DateTime?
    gender      String

    guardianName      String?
    guardianRelation  String?
    guardianDocuments String[]

    contactPreferences CommunicationMethod[]

    medicalCondition String?
    allergies        String?
    medications      String?

    documents      String[]
    otherDocuments String[]

    status ActivityStatus @default(ACTIVE)

    clinicId     String        @db.ObjectId
    clinic       Clinic        @relation(fields: [clinicId], references: [id])
    appointments Appointment[]
    bonds        Bond[]

    note String?

    receipts           Invoice[]
    reminders          DirectReminder[]
    vouchers           Voucher[]
    scheduledReminders ScheduledReminderHistory[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, clinicId])
    @@map("patients")
}

// @IdMod
model Appointment {
    dbId String @id @default(auto()) @map("_id") @db.ObjectId
    id   Int

    clinicId String @db.ObjectId

    patientId String  @db.ObjectId
    patient   Patient @relation(fields: [patientId], references: [dbId])

    disciplineId String     @db.ObjectId
    discipline   Discipline @relation(fields: [disciplineId], references: [id])

    serviceId String  @db.ObjectId
    service   Service @relation(fields: [serviceId], references: [id])

    specialistId String @db.ObjectId
    specialist   Staff  @relation(fields: [specialistId], references: [dbId])

    date     DateTime
    timeSlot String // 10:30am - 11:00am

    status    AppointmentStatus @default(PENDING)
    documents String[]
    note      String?

    cancelReason String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, clinicId])
    @@map("appointments")
}

model Discipline {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name String

    clinicId String @db.ObjectId
    clinic   Clinic @relation(fields: [clinicId], references: [id])

    staff        Staff[]
    bonds        Bond[]
    services     Service[]
    appointments Appointment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("disciplines")
}

model Service {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name String

    price    Float
    duration Int // In minutes

    disciplineId String     @db.ObjectId
    discipline   Discipline @relation(fields: [disciplineId], references: [id])

    bonds        Bond[]
    products     Product[]
    appointments Appointment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("services")
}

// @IdMod
model Voucher {
    dbId String @id @default(auto()) @map("_id") @db.ObjectId
    id   Int

    name  String
    price Float

    clinicId String @db.ObjectId

    patientId String?  @db.ObjectId
    patient   Patient? @relation(fields: [patientId], references: [dbId])

    expireDate DateTime
    status     ActivityStatus @default(ACTIVE)

    product Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, clinicId])
    @@map("vouchers")
}

// @IdMod
model Bond {
    dbId String @id @default(auto()) @map("_id") @db.ObjectId
    id   Int

    name String

    clinicId String @db.ObjectId

    patientId String  @db.ObjectId
    patient   Patient @relation(fields: [patientId], references: [dbId])

    disciplineId String     @db.ObjectId
    discipline   Discipline @relation(fields: [disciplineId], references: [id])

    serviceId String  @db.ObjectId
    service   Service @relation(fields: [serviceId], references: [id])
    sessions  Int

    price Float

    status   ActivityStatus @default(ACTIVE)
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, clinicId])
    @@map("bonds")
}

model Product {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    receiptId String  @db.ObjectId
    receipt   Invoice @relation(fields: [receiptId], references: [dbId])

    type     ProductType
    quantity Int

    voucherId String?  @db.ObjectId
    voucher   Voucher? @relation(fields: [voucherId], references: [dbId])

    bondId String? @db.ObjectId
    bond   Bond?   @relation(fields: [bondId], references: [dbId])

    serviceId String?  @db.ObjectId
    service   Service? @relation(fields: [serviceId], references: [id])

    otherId String?
    other   Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("products")
}

// @IdMod
model Invoice {
    dbId String @id @default(auto()) @map("_id") @db.ObjectId
    id   Int

    clinicId String @db.ObjectId
    clinic   Clinic @relation(fields: [clinicId], references: [id])

    patientId String  @db.ObjectId
    patient   Patient @relation(fields: [patientId], references: [dbId])

    tax      Float
    discount Float

    paid     Float // Paid Amount. Cause there maybe Due amount
    subTotal Float // Before Calculation
    total    Float // After all the Calculation

    note          String?
    paymentMethod String // TODO: Check methods
    products      Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, clinicId])
    @@map("receipts")
}

// Sends reminder directly - No interval
model DirectReminder {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    type     ReminderType @default(IMMEDIATE)
    schedule DateTime?

    patientId String  @db.ObjectId
    patient   Patient @relation(fields: [patientId], references: [dbId])

    communicationMethod CommunicationMethod

    subject String
    body    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("direct_reminders")
}

// Scheduled Reminder - Runs on Interval
model ReminderSchedule {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    clinicId String @db.ObjectId
    clinic   Clinic @relation(fields: [clinicId], references: [id])

    // This type is for what type of Message will be sent. Currently only reminders are of Appointments Related
    type  ReminderScheduleType @default(APPOINTMENT)
    prior Int? // Take in Minutes

    description  String?
    // This type is for which type of scheduled reminder is this. If TIMED - Reminder will be sent prior to a given time of appointment. DAY - in the day of Appointment. POST_APPOINTMENT and MISSED_APPOINTMENT are self explanatory
    scheduleType ReminderScheduleScheduleType @default(TIMED)

    communicationMethods CommunicationMethod[]
    status               ActivityStatus        @default(ACTIVE)

    subject String
    body    String

    histories ScheduledReminderHistory[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reminder_schedules")
}

model ScheduledReminderHistory {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    scheduleId String           @db.ObjectId
    schedule   ReminderSchedule @relation(fields: [scheduleId], references: [id])

    patientId String  @db.ObjectId
    patient   Patient @relation(fields: [patientId], references: [dbId])

    status DeliveryStatus @default(DELIVERED)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("scheduled_reminder_histories")
}

// ---------------- ENUMS START HERE ----------------
enum ActivityStatus {
    ACTIVE
    INACTIVE
}

enum Gender {
    MALE
    FEMALE
    OTHERS
}

enum DeliveryStatus {
    DELIVERED
    FAILED
}

enum NotificationStatus {
    VIEWED
    DELIVERED
    CREATED
}

enum ReminderType {
    IMMEDIATE
    SCHEDULED
}

enum ReminderScheduleType {
    APPOINTMENT
}

enum ReminderScheduleScheduleType {
    TIMED
    DAY
    POST_APPOINTMENT
    MISSED_APPOINTMENT
}

enum CommunicationMethod {
    EMAIL
    SMS
    WHATSAPP
}

enum ProductType {
    BOND
    SERVICE
    VOUCHER
    OTHER
}

enum PaymentMethod {
    CASH
    CARD
    VOUCHER
    BOND
    OTHER
}

enum PackageType {
    BASIC
    PRO
}

enum UsageType {
    INDIVIDUAL
    AGENCY
    DEVELOPER
}

enum PlanType {
    BASIC
    PREMIUM
    ENTERPRISE
}

enum PackageDuration {
    QUARTERLY
    SEMI_ANNUAL
    ANNUAL
}

enum SubscriptionStatus {
    PENDING
    PAID
    FAILED
    CANCELLED
}

enum UserRole {
    SUPER_ADMIN
    CLINIC_ADMIN
    RECEPTIONIST
    SPECIALIST
}

enum AppointmentStatus {
    SCHEDULED
    PENDING
    CONFIRMED
    COMPLETED
    CANCELLED
    MISSED
}

// TODO: Check which and which are the actual Status
