generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  password     String
  role         Role
  clinicId     String?       @db.ObjectId
  clinic       Clinic?       @relation(fields: [clinicId], references: [id])
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Clinic {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  phone    String
  email    String
  address1 String
  address2 String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  staff         Staff[]
  patients      Patient[]
  subscriptions Subscription[]
}

model Staff {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  user_id      String
  phone        String
  email        String?
  gender       String
  address      String?
  disciplineId String  @db.ObjectId
  role         String

  clinicId   String     @db.ObjectId
  discipline Discipline @relation(fields: [disciplineId], references: [id])
  clinic     Clinic     @relation(fields: [clinicId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discipline {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  staff Staff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName             String
  lastName              String?
  phone                 String
  age                   Int
  gender                String
  email                 String?
  address               String?
  patient_document_id   String?
  country               String?
  guardian_name         String?
  guardian_relationship String?
  guardian_document_id  String?
  medical_history       String?
  allergies             String?
  medications           String?
  medical_conditions    String?
  other_documents       String?
  patient_status        PatientStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clinicId     String        @db.ObjectId
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
  appointments Appointment[]
}

model Appointment {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  patientId       String            @db.ObjectId
  patient_name    String
  contact_number  String
  service         String
  specialist_name String
  specialistId    String            @db.ObjectId
  date            DateTime
  time            String
  status          AppointmentStatus
  notes           String?
  documents       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient    Patient @relation(fields: [patientId], references: [id])
  specialist User    @relation(fields: [specialistId], references: [id])
}

model Bonds {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  discipline   String
  service      String
  session      String
  price        Float
  status       BondStatus @default(ACTIVE)
  durationDays Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  product_type ProductType
  price        Float
  quantity     Int
  total        Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BillingAndInvoice {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  invoice_id     String
  name           String
  amount         Float
  tax            Float
  discount       Float
  total          Float
  payment_method PaymentMethod
  payment_status PaymentStatus

  payment_date DateTime      @default(now())
  status       BillingStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminders {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  reminder_id          String
  reminder_type        ReminderType
  reminder_time        Int
  reminder_message     String
  communication_method CommunicationMethod

  subject String
  body    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voucher {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  associate_name String
  amount         Float
  expire_date    DateTime
  status         VoucherStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model membershipPackage {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  maxDoctors    Int
  maxPatients   Int
  price         Float
  durationDays  Int
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clinicId  String   @db.ObjectId
  packageId String   @db.ObjectId
  startDate DateTime
  endDate   DateTime

  clinic  Clinic            @relation(fields: [clinicId], references: [id])
  package membershipPackage @relation(fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BillingStatus {
  ACTIVE
  INACTIVE
}

enum BondStatus {
  ACTIVE
  INACTIVE
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
}

enum PatientStatus {
  ACTIVE
  INACTIVE
}

enum ReminderType {
  APPOINTMENT
  BILLING
  OTHER
}

enum CommunicationMethod {
  EMAIL
  SMS
  WHATSAPP
}

enum ProductType {
  BOND
  SERVICE
  VOUCHER
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  VOUCHER
  BOND
  OTHER
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

// enum StaffRole {
//   CLEANER
//   CONSULTATION
//   EMERGENCY
//   OTHERS
// }

enum Role {
  SUPER_ADMIN
  CLINIC_ADMIN
  RECEPTIONIST
  SPECIALIST
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
